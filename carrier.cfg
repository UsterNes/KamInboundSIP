route[is_carrier]{
    xlog("L_INFO","Inroute source is carrier");
    //HMSET customer:7045 routeId 23456 balance 700
    redis_cmd("redis","HGET customer:$avp(custId) routeId","r");
    $avp(routeId)=$redis(r=>value);

    //check abuse caller
    redis_cmd("redis","SISMEMBER abuse:$avp(called_number) $avp(caller_id)","r");
    if($redis(r=>value[0])==1){
        sl_send_reply("486","Busy Here");
        exit;
    }

    route(did_channels_check);
	
	if($avp(routingType)==1){ 
		//direct routing could be IP address or Phone number or Username
		redis_cmd("redis","HMGET direct:$avp(called_number) dstUri dnis","r");
		if($redis(r=>value[0])!=0){
			$avp(dstUri)=$redis(r=>value[0]);
			$avp(dnis)=$redis(r=>value[1]);
		}
	}else{
		sl_send_reply("500","Internal Server Error");
		exit;
	
	}
    route(rtp_engine);
    route(relay_out);

}

route[relay_out]{
    xlog("L_INFO","Call routing identity is $avp(dstUri) rtpProxy = $sht(rtpProxy=>mip_$ci)");
    $avp(identity)=$(avp(dstUri){s.select,0,:});
    $avp(port)=$(avp(dstUri){s.select,1,:});
    $avp(dstUrilen)=$(avp(identity){s.len});

    if(is_ip($avp(identity))){
        //TODO dnis for the called number
		//call is routed to IP address and the DNIS should be same as called number
        xlog("L_INFO","identity is IP Address identity : $avp(identity) and port : $avp(port)");
        $rU=$avp(dnis);
        $rd=$avp(identity);
        $rp=$avp(port);
        $var(duri) = "sip:"+$rU+"@"+$avp(identity)+":"+$avp(port);
        $du = $var(duri);
        t_on_failure("dst_failure");
        t_on_reply("dst_reply");
        if(!t_relay()) {
            sl_reply_error();
            exit;
        }
        exit;
    }

    if($avp(dstUrilen)>7){
        xlog("L_INFO","PSTN number ROUTING");        
		$rU=$avp(dnis);
        $avp(called_number)=$avp(dnis);
        route(pstn_forward);
    }

}

onreply_route[dst_reply]{

    if(status == "180" || status == "183") {
        //xlog("L_INFO","ringing");
        $avp(inv_timer) = 45;
        //do not fail-over call now as we have a provisional response
        setflag(RINGING);
    }

    if(status == "200") {		
        if(!isflagset(ANSWERED)){
            xlog("L_INFO","the call was answered and ANSWERED flag was will be set now");
            setflag(ANSWERED);
            $avp(sip_code)=$T_reply_code;
            $avp(sip_reason)=$T_reply_reason;
            route(SET_CDR);
            route(rtp_engine);
        }
    }

}

failure_route[dst_failure]{
    xlog("L_INFO","failure route ; $T_reply_code");
    if(t_is_canceled() || t_check_status("487") || t_check_status("404") || t_check_status("486")) {
        xlog("L_INFO","Incase of a cancelled / Invalid call Attempt $rm ; Inbound call");
        setflag(CANCELLED);
        $avp(sip_code)=$T_reply_code;
        $avp(sip_reason)=$T_reply_reason;
		xlog("L_INFO","cancelled call ; sip_code :$avp(sip_code) ; sip_reason: $avp(sip_reason)");
        route(SET_CDR);
        route(rtp_engine);
        acc_db_request("Canceled call", "failed_sessions");
        exit;
    }

    if(t_check_status("408|403")){
        xlog("L_INFO","failure route 408");
        $avp(inv_timer) = 17;
        $avp(sip_code)=$T_reply_code;
        $avp(sip_reason)=$T_reply_reason;
        route(SET_CDR);
        acc_db_request("Canceled call", "failed_sessions");
		exit;
    }

    if(t_check_status("480")){
        xlog("L_INFO","failure route 480");
        setflag(CANCELLED);
        $avp(sip_code)=$T_reply_code;
        $avp(sip_reason)=$T_reply_reason;
        route(SET_CDR);
        route(rtp_engine);
        acc_db_request("Temp Unavailable", "failed_sessions");
        exit;
    }

    if(isflagset(RINGING)){
        //Incase a call fails after a 18X provisional response
        xlog("L_INFO","The call had already received a 180 0r 183 and then failed $T_reply_code $rm");
        $avp(sip_code)=$T_reply_code;
        $avp(sip_reason)=$T_reply_reason;
        route(SET_CDR);
        acc_db_request("RINGING", "failed_sessions");
        resetflag(RINGING);
        exit;
    }

}

